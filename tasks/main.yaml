---
# nginx docker

- block:
    - name: Check Docker installtion 
      command: docker --version
      register: docker
      changed_when: false
  rescue:
    - name: Install docker
      include_role: 
        name: geerlingguy.docker
        apply:
          become: true

- name: Create nginx-data directory
  file:
    path: "{{ item }}"
    state: directory
    mode: 0644
  with_items:
    - "{{ reverse_proxy_nginx_data_dir }}"
    - "{{ reverse_proxy_nginx_data_dir }}/conf.d"
    - "{{ reverse_proxy_nginx_data_dir }}/certs"
  become: true

- name: Delete old container
  shell: docker rm -f $(docker ps -a -q --filter "label={{ reverse_proxy_nginx_label }}")
  register: docker_removed
  when: reverse_proxy_docker_remove_container|bool
  failed_when:
    - docker_removed.rc != 0
    - '"requires at least 1 argument" not in docker_removed.stderr'
  become : true

- name: archive old config
  archive:
    path:
      - "{{ reverse_proxy_nginx_data_dir }}/conf.d/*"
    dest: "{{ reverse_proxy_nginx_data_dir }}/old_config_{{ ansible_date_time.epoch }}.tar.gz"
    remove: true
  register: archive_config
  when: reverse_proxy_nginx_new_config|bool
  failed_when: 
    - archive_config.failed 
    - '"no source paths were found" not in archive_config.msg'
  become: true


- name: Create NGINX docker container
  command: docker create \
            --name {{ reverse_proxy_nginx_container_name }} \
            --label {{ reverse_proxy_nginx_label }} \
            --net host \
            -v {{ reverse_proxy_nginx_data_dir }}/conf.d:/etc/nginx/conf.d:ro \
            -v {{ reverse_proxy_nginx_data_dir }}/certs:/etc/nginx/certs:ro \
            --restart unless-stopped \
            nginx
  register: docker_create
  failed_when:
    - docker_create.rc != 0
    - '"is already in use by container" not in docker_create.stderr'
  changed_when:
    - docker_create.rc == 0
  notify: "reverse_proxy_nginx_restart"
  become: true

- name: copy http server config
  template:
    src: default.server.http.conf.j2
    dest: "{{ reverse_proxy_nginx_data_dir }}/conf.d/default.server.http.conf"
    owner: root
    mode: 0600
  when: reverse_proxy_nginx_http
  notify: "reverse_proxy_nginx_restart"
  become: true

- name: setup TLS
  block:

    - name: check if joined the domain
      shell: kinit -k host/$(hostname -f)
      register: domain_joined
      failed_when: false
      changed_when: false

    - name: archive old cert
      archive:
        path:
          - "{{ reverse_proxy_nginx_data_dir }}/certs/*"
        dest: "{{ reverse_proxy_nginx_data_dir }}/old_cert_{{ ansible_date_time.epoch }}.tar.gz"
        remove: true
      register: archive_cert
      when: reverse_proxy_nginx_new_cert|bool
      failed_when: 
        - archive_cert.failed 
        - '"no source paths were found" not in archive_cert.msg'

    - name: generate certificate
      include_tasks: ./ansible-playbooks/ipa-getcert.yml 
      vars:
        pki_dir: "{{ reverse_proxy_nginx_data_dir }}/certs"
        ipa_host: "{{ server }}"
        ipa_admin_user: "{{ ipa_principal }}"
        ipa_admin_pass: "{{ ipa_password }}"
        use_custom_root: false
        cert_chain_checksum: "{{ vault_ipa_cert_hash }}"
      when: domain_joined.rc == 0
    - set_fact: 
        reverse_proxy_nginx_cert_ext: chain
      when: domain_joined.rc == 0

    - include_tasks: get_selfsigned_cert.yaml
      when: domain_joined.rc != 0


    - name: copy https server config
      template:
        src: default.server.https.conf.j2 
        dest: "{{ reverse_proxy_nginx_data_dir }}/conf.d/default.server.https.conf"
        owner: root
        mode: 0600
      notify: "reverse_proxy_nginx_restart"

   
  when: reverse_proxy_nginx_https
  become: true
